4 |  node@0   program                             children: @0 -> [ @1 @5 @8 @11 @14 @17 ]  
5 |  node@1   stmt         stmt_type: decl        children: @1 -> [ @2 ]  
5 |  node@2   type              type: int         children: @2 -> [ @3 @4 ]  
5 |  node@3   var           var_name: a           
5 |  node@4   var           var_name: s           
6 |  node@5   stmt         stmt_type: assign      children: @5 -> [ @6 @7 ]  
6 |  node@6   var           var_name: a           
6 |  node@7   const       const_type: int         
7 |  node@8   stmt         stmt_type: assign      children: @8 -> [ @9 @10 ]  
7 |  node@9   var           var_name: s           
7 |  node@10  const       const_type: int         
8 |  node@11  stmt         stmt_type: decl        children: @11 -> [ @12 ]  
8 |  node@12  type              type: char        children: @12 -> [ @13 ]  
8 |  node@13  var           var_name: ch          
9 |  node@14  stmt         stmt_type: scanf       children: @14 -> [ @15 @16 ]  
9 |  node@15  const       const_type: string      
9 |  node@16  var           var_name: ch          
10|  node@17  stmt         stmt_type: while       children: @17 -> [ @18 @36 ]  
10|  node@18  expr         expr_type: ||          children: @18 -> [ @19 @26 ]  
10|  node@19  expr         expr_type: &&          children: @19 -> [ @20 @23 ]  
10|  node@20  expr         expr_type: >           children: @20 -> [ @21 @22 ]  
10|  node@21  var           var_name: a           
10|  node@22  const       const_type: int         
10|  node@23  expr         expr_type: <=          children: @23 -> [ @24 @25 ]  
10|  node@24  var           var_name: a           
10|  node@25  const       const_type: int         
10|  node@26  expr         expr_type: &&          children: @26 -> [ @27 @32 ]  
10|  node@27  expr         expr_type: ==          children: @27 -> [ @28 @31 ]  
10|  node@28  expr         expr_type: %           children: @28 -> [ @29 @30 ]  
10|  node@29  var           var_name: a           
10|  node@30  const       const_type: int         
10|  node@31  const       const_type: int         
10|  node@32  expr         expr_type: ==          children: @32 -> [ @33 @35 ]  
10|  node@33  expr         expr_type: !           children: @33 -> [ @34 ]  
10|  node@34  var           var_name: a           
10|  node@35  const       const_type: int         
11|  node@36  stmt         stmt_type: block       children: @36 -> [ @37 @40 @43 @46 @49 ]  
11|  node@37  stmt         stmt_type: sub_assign  children: @37 -> [ @38 @39 ]  
11|  node@38  var           var_name: a           
11|  node@39  const       const_type: int         
12|  node@40  stmt         stmt_type: decl        children: @40 -> [ @41 ]  
12|  node@41  type              type: int         children: @41 -> [ @42 ]  
12|  node@42  var           var_name: a           
13|  node@43  stmt         stmt_type: assign      children: @43 -> [ @44 @45 ]  
13|  node@44  var           var_name: a           
13|  node@45  const       const_type: int         
14|  node@46  stmt         stmt_type: add_assign  children: @46 -> [ @47 @48 ]  
14|  node@47  var           var_name: s           
14|  node@48  var           var_name: a           
15|  node@49  stmt         stmt_type: if          children: @49 -> [ @50 @55 ]  
15|  node@50  expr         expr_type: <           children: @50 -> [ @51 @53 ]  
15|  node@51  expr         expr_type: 0-          children: @51 -> [ @52 ]  
15|  node@52  var           var_name: s           
15|  node@53  expr         expr_type: 0-          children: @53 -> [ @54 ]  
15|  node@54  const       const_type: int         
16|  node@55  stmt         stmt_type: block       children: @55 -> [ @56 @59 @62 @65 ]  
16|  node@56  stmt         stmt_type: printf      children: @56 -> [ @57 @58 ]  
16|  node@57  const       const_type: string      
16|  node@58  var           var_name: s           
17|  node@59  stmt         stmt_type: decl        children: @59 -> [ @60 ]  
17|  node@60  type              type: int         children: @60 -> [ @61 ]  
17|  node@61  var           var_name: b           
18|  node@62  stmt         stmt_type: assign      children: @62 -> [ @63 @64 ]  
18|  node@63  var           var_name: b           
18|  node@64  const       const_type: int         
19|  node@65  stmt         stmt_type: for         children: @65 -> [ @66 @70 @73 @75 ]  
19|  node@66  stmt         stmt_type: decl        children: @66 -> [ @67 ]  
19|  node@67  type              type: int         children: @67 -> [ @68 ]  
19|  node@68  var           var_name: i           children: @68 -> [ @69 ]  
19|  node@69  const       const_type: int         
19|  node@70  expr         expr_type: <           children: @70 -> [ @71 @72 ]  
19|  node@71  var           var_name: i           
19|  node@72  var           var_name: b           
19|  node@73  stmt         stmt_type: self_add_assign  children: @73 -> [ @74 ]  
19|  node@74  var           var_name: i           
20|  node@75  stmt         stmt_type: block       children: @75 -> [ @76 ]  
20|  node@76  stmt         stmt_type: printf      children: @76 -> [ @77 @78 ]  
20|  node@77  const       const_type: string      
20|  node@78  var           var_name: i     


/*
I'm level 1 test.
*/
void main() {
    int a, s;
    a = 10;
    s = 0;
    char ch;
    scanf("%d", &ch);
    while(a>0 && a<=10 || a%100==10 && !a==10) {
        a -= 1;
        int a;
        a = 10;
        s += a;
        if(-s < -10) {
            printf("result is: %d\n", s);
            int b;
            b = 10;
            for(int i=0; i<b; i++) {
                printf("Have fun: %d\n", i);
            }
        }
    }
}
// No more compilation error.      
