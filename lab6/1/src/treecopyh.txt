#ifndef TREE_H
#define TREE_H

#include "pch.h"
#include "type.h"
#define MAX_CHILD_NUM 20
/**
 * 问题：多个孩子怎么表示
 * 第二个孩子之后就用孩子的兄弟表示？？？先这样吧！
 * 
 * 
 * 
 * */
#if 1
enum NodeType//-------结点类型
{
    NODE_CONST, //常量
    NODE_VAR,//变量
    NODE_ARR,
    NODE_EXPR,//表达式
    NODE_TYPE,//类型

    NODE_STMT,//语句------------STMT_TYPE
    NODE_PROG,//程序
};

enum OperatorType//---------运算类型
{
    OP_EQ=1,  // 未初始化的就是0,这样可以区分
    OP_ADD,
    OP_SUB,
    OP_MUL,
    OP_DIV,
    OP_MOD,
    OP_NEG,
    OP_AND,
    OP_OR,
    OP_NOT,
    OP_LESS_EQ,
    OP_LESS_THAN,
    OP_MORE_EQ,
    OP_MORE_THAN,
    OP_NOT_EQ,

};

enum StmtType {//------------语句类型
    STMT_BLOCK,
    STMT_SKIP,
    STMT_RETURN,//return
    STMT_DECL_V,//var
    STMT_DECL_P,//*p
    STMT_DECL_R,//&
    STMT_DECL_A,//a[1][2]
    STMT_ASSIGN,//  =
    STMT_ADD_ASSIGN,//a+=1
    STMT_SUB_ASSIGN,//
    STMT_MUL_ASSIGN,
    STMT_DIV_ASSIGN,
    STMT_SELF_ADD_ASSIGN,
    STMT_SELF_SUB_ASSIGN,//a--
    STMT_PRINTF,
    STMT_SCANF,
    STMT_IF,
    STMT_IF_ELSE,//------
    STMT_WHILE,//if else for while
    STMT_FOR,//-----
}
;

struct Label {
	string _true;
	string _false;
	string begin;
	string next;
};
union NodeAttr {
	int op;
	int vali;
	char valc;
	int symtbl_seq;
	
	NodeAttr(void) { op = 0; }
	NodeAttr(int i)	{ vali = i; }
	NodeAttr(char c) { valc = c; }
};


struct TreeNode
{
public:
    //固有属性
    int nodeID;  // 用于作业的序号输出
    int lineno;
    NodeType nodeType;
    Label label;
    NodeAttr attr;

    //可选属性（看是什么类型的结点）
    //EXPR
        OperatorType op_type;  // 如果是表达式,初始化-1,代表空
    //TYPE
        //注意定义的是一个类对象，需要用this.type.type！！！
        Type* type;  // 对于常量+变量、类型（用于声明或定义）、表达式结点，有类型。 定义在type.h
    //STMT
        StmtType stmt_type;//语句类型
    //CONST
        int int_val;//1
        char ch_val;//2
        bool b_val;//3
        string str_val;//4
        int address;//5 pointer指针

        char val_type_flag;//'i' 'c' 'b' 's' 'p'  
        //VAR
        string var_name;//变量名 or 数组名共用

        TreeNode *child = nullptr;
        // vector<TreeNode*> children;//-------赋值不成功！！！
        // TreeNode childarr[20];//不允许使用不完整的类型,只能写指针数组
        // TreeNode* childarr[MAX_CHILD_NUM];
        // int childnum=0; //--------
        TreeNode *sibling = nullptr;
        TreeNode *father = nullptr;

        void addChild(TreeNode *);
        void addSibling(TreeNode *);

        //显示信息
        void printNodeInfo();
        void printChildrenId();

        //生成结点序号，为了显示美观，所以一开始不需要结点序号？？
        //注意这两个函数，只给root用！
        void genNodeId();
        void printAST(); // 先输出自己 + 孩子们的id；再依次让每个孩子输出AST。
        void type_check(TreeNode *t);


        /****************lab7 final*********************/
        void gen_code(ostream &out); //, TreeNode *root);
        void recursive_gen_code(ostream &out, TreeNode *t);
        void expr_gen_code(ostream &out, TreeNode *t);
        void stmt_gen_code(ostream &out, TreeNode *t);

        void gen_decl(ostream &out, TreeNode *t);
        void gen_header(ostream &out);
        void get_label(void);
        void recursive_get_label(TreeNode *t);
        void expr_get_label(TreeNode *t);
        void stmt_get_label(ofstream &out, TreeNode *t);
        string new_label(void);

        TreeNode *NewRoot(int kind, int kind_kind, NodeAttr attr, int type,
        TreeNode *child1, TreeNode *child2, TreeNode *child3, TreeNode *child4);

        void get_temp_var(TreeNode *t);

    public:
        TreeNode();
        TreeNode(int lineno, NodeType type);
        //deep copy func
        // TreeNode operator=(TreeNode &t);//暂不实现！

        static int node_num;
        int total_node_num();

        /********************final**************/
        static int label_seq;
};

/*********************我的符号表****************************/
struct SymTable
{ 
public:
    SymTable(int scopeid);
    int scope;//作用域级别
    // string name;
    // string type; //or char type//int char bool string? pointer reference
    // char flag;//var  const  pointer  struct  function
    // int d[5];//数组维数
    map<string,pair<string,int> > tmap;
    map<string,TreeNode* > nodemap;
    SymTable *father;

    //----
};


/*********************助教的符号表****************************/

#define MAX_ID 1024

typedef struct TAG_SYMBOL_ENTRY
{
	string name;
	int token;//
	string type;//none 
} symbol_entry;

class symbol_table
{
private:
	symbol_entry table[MAX_ID];
	int size;

public:
	int lookup(string name);
	int insert(string name, int token);
	int gettoken(string name);
	string &getname(int pos);
	int set_type(int pos, string type);
	string get_type(int pos);
};

#endif
/****************************************************************************/
#if 0//助教头文件
enum
{
	STMT_NODE = 0,
	EXPR_NODE,
	DECL_NODE
};

enum
{
	WHILE_STMT = 0,
	PRINT_STMT,
	COMP_STMT
};

enum
{
	TYPE_EXPR = 0,
	OP_EXPR,
    CONST_EXPR,
	ID_EXPR
};

enum
{
	VAR_DECL = 0,
};

enum
{
	Notype = 0,
	Integer,
	Boolean,
};

#define MAX_CHILDREN 4





struct Node
{
	struct Node *children[MAX_CHILDREN];
	struct Node *sibling;
	int lineno;
	int kind;
	int kind_kind;
	NodeAttr attr;
	int type;
	int seq;
	int temp_var;
	Label label;

	void output(void);
};

class tree
{
private:
	Node *root;
	int node_seq = 0;
	int temp_var_seq = 0;
	int label_seq = 0;

private:
	void type_check(Node *t);
	void get_temp_var(Node *t);
	string new_label(void);
	void recursive_get_label(Node *t);
	void stmt_get_label(Node *t);
	void expr_get_label(Node *t);
	void gen_header(ostream &out);
	void gen_decl(ostream &out, Node *t);
	void recursive_gen_code(ostream &out, Node *t);
	void stmt_gen_code(ostream &out, Node *t);
	void expr_gen_code(ostream &out, Node *t);

public:
	Node *NewRoot(int kind, int kind_kind, NodeAttr attr, int type,
		Node *child1 = NULL, Node *child2 = NULL, Node *child3 = NULL, Node *child4 = NULL);
	void get_label(void);
	void gen_code(ostream &out);
};
#endif
#endif