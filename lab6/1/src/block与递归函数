#          Node         Node Type                   Children
# 0|  @0   prog                                     children: @0 -> [ @1 @5 ]  
# 1|  @1   stmt         stmt_type: decl var         children: @1 -> [ @2 ]  
# 1|  @2   type              type: int              children: @2 -> [ @3 ]  
# 1|  @3   var           var_name: a                children: @3 -> [ @4 ]  
# 1|  @4   const       const_type: int              const_value: 1    
# 0|  @5   func                                     children: @5 -> [ @6 ]  
# 10|  @6   block                                    children: @6 -> [ @7 @19 ]  
# 3|  @7   stmt         stmt_type: if else          children: @7 -> [ @8 @11 @15 ]  
# 3|  @8   expr         expr_type: -                children: @8 -> [ @9 @10 ]  
# 3|  @9   var           var_name: a                
# 3|  @10  const       const_type: int              const_value: 7    
# 5|  @11  stmt         stmt_type: block            children: @11 -> [ @12 ]  
# 5|  @12  block                                    children: @12 -> [ @13 ]  
# 5|  @13  stmt         stmt_type: printf           children: @13 -> [ @14 ]  
# 5|  @14  const       const_type: string           const_value: "11111111"    
# 9|  @15  stmt         stmt_type: block            children: @15 -> [ @16 ]  
# 9|  @16  block                                    children: @16 -> [ @17 ]  
# 9|  @17  stmt         stmt_type: printf           children: @17 -> [ @18 ]  
# 9|  @18  const       const_type: string           const_value: "2222222"    
# 13|  @19  stmt         stmt_type: return           children: @19 -> [ @20 ]  
# 13|  @20  const       const_type: int              const_value: 0    


#***********************asm code***********************


# Simple C Complier created by Shen Zhe, 2021.1
	.file  "test.c"
.data
	.align 4
	.type	a, @object
	.size	a, 4
a:
	.long	1

.section	.rodata
.LC0:
	.string	"11111111"
.LC1:
	.string	"2222222"

.text
	.globl	main
	.type	main, @function
main:
.LFB0:
	leal	4(%esp), %ecx
	andl	$-16, %esp
	pushl	-4(%ecx)
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%ecx


	movl	$7, %edx
	movl	a, %eax
	subl	%edx, %eax
	testl	%eax, %eax
	je	.L1
	subl	$12, %esp
	pushl	$.LC0
	call	printf
	addl	$16, %esp

	jmp	.L2
.L1:
	subl	$12, %esp
	pushl	$.LC1
	call	printf
	addl	$16, %esp

.L2:
					!!!!!!!!!!!!
						movl	$7, %edx
						movl	a, %eax
						subl	%edx, %eax
						subl	$12, %esp
						pushl	$.LC0
						call	printf
						addl	$16, %esp

						subl	$12, %esp
						pushl	$.LC1
						call	printf
						addl	$16, %esp


	movl	$0, %eax
	movl	-4(%ebp), %ecx
	leave
	leal	-4(%ecx), %esp
	ret
.LFE0:
	.size	main, .-main

.ident		"Simple_C_Complier_ShenZhe: (Ubuntu 5.4.0-6ubuntu1~16.04.12) 5.4.0 20160609"
.section	.note.GNU-stack,"",@progbits



stmt         stmt_type: block  问题！！！！！节点应该为block！！！！！！

block与递归函数的问题

安全的使用，不让结果返回两次！！！