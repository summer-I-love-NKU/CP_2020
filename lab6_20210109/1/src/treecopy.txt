#include "tree.h"
#include<iomanip>//输出美观
/**
 * 问题思考：
    * this指针，一般是隐含的，用处是指向变量自身，
    * 啊啊啊对于指针不是很懂 用*????
    * 对于多个孩子，让孩子之间（兄弟）连起来：
            *孩子兄弟表示法：http://data.biancheng.net/view/30.html
            *遍历https://www.xuebuyuan.com/1175648.html
            * 增加孩子结点，就是让孩子之间（作为兄弟）连起来，一个结点只有一个孩子一个兄弟
            * 是不是就都转成了二叉树？？
    * 结点序号只是为了最后输出美观，所以一开始不需要初始化，最后遍历一次树就行了
    * 

 
 * */


#if 1
	/**************************************SymTable*********************************************/
	SymTable::SymTable(int scopeid)
	{
		this->scope = scopeid;
	}

	/**************************************symbol_table*********************************************/
	symbol_table symtbl;

	int symbol_table::lookup(string name)
	{
		for (int i = 0; i < size; i++)
			if (table[i].name == name)
				return i;
		return -1;
	}

	int symbol_table::insert(string name, int token)
	{
		if (size >= MAX_ID)
			return -1;
		table[size].name = name;
		table[size].token = token;
		table[size].type = "none";
		size++;
		return size - 1;
	}

	int symbol_table::gettoken(string name)
	{
		for (int i = 0; i < size; i++)
			if (table[i].name == name)
				return table[i].token;
		return -1;
	}

	string& symbol_table::getname(int pos)
	{
		return table[pos].name;
	}

	int symbol_table::set_type(int pos, string type)
	{
		if (pos < 0 || pos >= size)
		{
			cerr << "Bad identifier" << endl;
			return -1;
		}

		table[pos].type = type;
		return 0;//
	}

	string symbol_table::get_type(int pos)
	{
		if (pos < 0 || pos >= size)
		{
			cerr << "Bad identifier" << endl;
			return "error";
		}

		return table[pos].type;
	}
#endif
	
#if 1

	/**********************************************tree.cpp***************************************************/
		string NODETYPE_name[20] = {"const","var","array","expr","type","stmt","program","8"};
		string StmtType_name[30] = {"block","skip", "return","decl var","decl ptr","decl ref","decl array","assign","add_assign","sub_assign","mul_assign","div_assign",
		"self_add_assign","self_sub_assign","printf","scanf","if","if else","while","for","21"};
		string ValueType_name[20] = {"bool", "int", "char", "string","void","const int","const char","8"};
		string OperatorType_name[30] = {"reserved","==","+","-","*","/","%","0-","&&","||","!","<=","<",">=",">","!=","16"};

		int the_nodeID = 0, new0_nodeID = 0, new_nodeID = 0; //根结点
		int TreeNode::node_num = 0, TreeNode::label_seq = 0;
	#endif
	//---------------------------------------------------------
	#if 1
	//增加孩子结点，就是让孩子之间依次连起来
	void TreeNode::addChild(TreeNode *the_child)
	{

		if (this->child != nullptr) //可以直接this->child->addSibling(the_child);
		{
			TreeNode *p=this->child;
			while(p->sibling!=nullptr)
			{
				p = p->sibling;
			}
			p->sibling = the_child;
			the_child->father = this;
			// TreeNode *ttt = new TreeNode();
			// ttt=the_child;
			// this->children.push_back(ttt);
			// this->childarr[this->childnum] = the_child;//this->childnum!!!!
			// this->childnum += 1;
		}
		else
		{
			this->child = the_child;
			the_child->father = this;
		}
	}
	//增加兄弟结点-----类似修改一下！！！
	void TreeNode::addSibling(TreeNode* the_sibling)
	{ //包括了this有兄弟和无兄弟的情况
		TreeNode *p=this;
		while(p->sibling!=nullptr)
		{
			p = p->sibling;
		}
		p->sibling = the_sibling;
		the_sibling->father = this->father;
		
	}
	//构造函数，初始化，序号自增
	TreeNode::TreeNode(int lineno, NodeType type) 
	{
		node_num++;
		//第一件事，序号自增,记录行号
		this->nodeID = the_nodeID;
		the_nodeID++;
		this->lineno = lineno;
		this->nodeType = type;
	}
	TreeNode::TreeNode() 
	{
		
	}
	// TreeNode TreeNode::operator=(TreeNode& t)
	// {


	// 	// return *this;
	// }
	void TreeNode::printNodeInfo() 
	{
		int setw1 = 15, setw2 = 15;
		cout << std::left << setw(2) << this->lineno << "|  "
			<< "@" << std::left << setw(2) << this->nodeID << "  " << setw(7) << NODETYPE_name[this->nodeType] << "  ";

		switch (this->nodeType)
		{
		case NODE_STMT:
			cout << std::right<<setw(setw1)<< "stmt_type: " << std::left<<setw(setw2)<<StmtType_name[this->stmt_type];
			// cout<<setw(setw1+setw2)<<" ";//--------
			break;
		case NODE_CONST:
			//---------注意如果有类型转换：  3 |  node@4   const  const_type: int   const_value: a 
			cout << std::right<<setw(setw1)<< "const_type: " << std::left<<setw(setw2)<<ValueType_name[this->type->type];
			cout << std::right<<setw(setw1)<< "const_value: ";//------------
			switch (this->val_type_flag)
			{
			case 'b':
				cout << this->b_val;
				break;
			case 'i':
				cout << this->int_val;
				break;
			case 'c':
				cout << this->ch_val;
				break;
			case 's':
				cout << this->str_val;
				break;
			default:
				cout << "error!!!";
				break;
			}
			cout << "  ";
			break;
		case NODE_VAR:
			cout << std::right<<setw(setw1)<< "var_name: " << std::left<<setw(setw2)<<this->var_name;
			// cout << std::right << setw(setw1) << "var_value: "<< std::left<<setw(setw2) << this->int_val;//------------
			break;
		case NODE_ARR:
			cout << std::right<<setw(setw1)<< "array_name: " << std::left<<setw(setw2)<<this->var_name;
			// cout<<setw(setw1+setw2)<<" ";//-----------
			break;
		case NODE_TYPE:
			cout << std::right<<setw(setw1)<< "type: " << std::left<<setw(setw2)<<ValueType_name[this->type->type];
			// cout<<setw(setw1+setw2)<<" ";//-----------
			break;
		case NODE_EXPR:
			cout << std::right<<setw(setw1)<< "expr_type: " << std::left<<setw(setw2)<<OperatorType_name[this->op_type];
			// cout << std::right<<setw(setw1)<< "expr_value: "<<std::left<<setw(setw2)<< this->int_val;//------
			break;
		case NODE_PROG:
			cout<<setw(setw1+setw2)<<" ";
			// cout<<setw(setw1+setw2)<<" ";//setw1+setw2 只有root走这里吧//---------
			break;
		default:
			cout<<"error!!!";//
			break;
		}
		cout << "  ";


		//这里别忘了判断条件！！！有无孩子呀！！！
		if(this->child!=nullptr)
			this->printChildrenId();
		cout << endl;
	}

	void TreeNode::printChildrenId() 
	{
		cout << "children: @"<<this->nodeID<<" -> [ @"<<this->child->nodeID << " ";
		TreeNode *p = this->child;
		while (p->sibling != nullptr)
		{
			cout << "@" << p->sibling->nodeID << " ";
			p = p->sibling;
		}
		cout << "]"<<"  ";

	}


	//这两个函数是给root用的
	//生成结点的同时也就打印信息了！！！不行，生成不完全，打印的就有错误！
	//必须先生成一次
	void TreeNode::genNodeId()
	{
		if(this==nullptr)
			return;
		this->nodeID = new0_nodeID++;

		this->child->genNodeId();
		this->sibling->genNodeId();
		
	}

	void TreeNode::printAST() 
	{
		if(this==nullptr)
			return;
		this->nodeID = new_nodeID++;
		this->printNodeInfo();

		this->child->printAST();
		this->sibling->printAST();
	}


	int TreeNode::total_node_num()
	{
		return node_num;
	}

#endif




/*******************************lab7 final********************************************/

//汇编代码结尾部分
string _ident = "\"Compiler_ShenZhe_CP2020: (Ubuntu 5.4.0-6ubuntu1~16.04.12) 5.4.0 20160609\"";
string _section = ".note.GNU-stack,\"\",@progbits";

void TreeNode::gen_header(ostream &out)
{
	out << "# Simple C Complier created by Shen Zhe, 2021.1" << endl;
	out << "	.file  \"test.c\"" << endl;
}

/***************************运算符重载：带数字的字符拼接******************************/
string operator + (string &content, int number) {
    return content + to_string(number);
}

string& operator += (string &content, int number) {
	return content = content + to_string(number);
}



// map <字符串， 标签序列号> 字符串表
map<string, int> strlist;
int strindex = 0;
/*********************************************************************/
// 描述了代码生成的基本框架
// 以while为例，给出打label的一个示例
// 以加法为例，给出生成x86汇编代码的一个示例
void TreeNode::gen_code(ostream &out)//root调用
{
	gen_header(out);

	TreeNode *p = this->child;
	while(p!=nullptr)
	{
		recursive_gen_code(out,p);
		p = p->sibling;
	}

	out << _ident << endl
		<< _section << endl;

	// TreeNode *p = root->child;
	// if (p->nodeType == NODE_STMT)
	// 	gen_decl(out, p);
    // out << endl << endl << "# your asm code here" << endl;
	// out << "\t.text" << endl;
    // out << "\t.globl _start" << endl;
	// recursive_gen_code(out, root);
	// if (root->label.next != "")
	// 	out << root->label.next << ":" << endl;
	// out << "\tret" << endl;
}



void TreeNode::recursive_gen_code(ostream &out, TreeNode *t)
{
	if (t->nodeType == NODE_STMT)
	{
		expr_gen_code(out, t);
	}
}

void TreeNode::stmt_gen_code(ostream &out, TreeNode *t)
{

	/* ... */
}



void TreeNode::get_label(void)//root call it 
{
	this->label.begin = "_start";
	recursive_get_label(this);
}
void TreeNode::recursive_get_label(TreeNode *t)
{
	if (t->nodeType == NODE_STMT)
		stmt_get_label(t);
	else if (t->nodeType == NODE_EXPR)
		expr_get_label(t);
}

void TreeNode::stmt_get_label(ofstream& out, TreeNode *t)
{
	if (t->nodeType == STMT_DECL_V)
	{
		// for (int i = 0; t->children[i]; i++)
		// {
		// 	recursive_gen_code(out, t->children[i]);
		// 	for (TreeNode *p = t->children[i]->sibling; p; p = p->sibling)
		// 		recursive_gen_code(out, p);
		// }
	}
	else if (t->nodeType == STMT_ASSIGN)
	{
		// if (t->label.begin != "")
		// 	out << t->label.begin << ":" << endl;
		// recursive_gen_code(out, t->children[0]);
		// recursive_gen_code(out, t->children[1]);
		// out << "\tjmp " << t->label.begin << endl;
	}
	else if (t->nodeType == STMT_PRINTF)
	{
		TreeNode *p = t->child;
		cout << ".section	.rodata\n";//printf()???
		while (p != nullptr)
		{
			if(strlist.count(p->str_val)==0)
			{
				strlist[p->str_val] = strindex;
				out << ".LC"<<strindex++<<":\n\t.string	\"" << 
				p->str_val << "\"\n" << endl;
			}
			p = p->sibling;
		}
	}
	else
	{
		;
	}

// 	switch (t->stmt_type)
// 	{
// 	case COMP_STMT:
// 		{
// 			TreeNode *last;
// 			TreeNode *p;
// 			for (p = t->children[0]; p->kind == DECL_NODE; p = p->sibling) ;

// 			p->label.begin = t->label.begin;
// 			for (; p; p = p->sibling)
// 			{
// 				last = p;
// 				recursive_get_label(p);
// 			}

// 			t->label.next = last->label.next;
// 			if (t->sibling)
// 				t->sibling->label.begin = t->label.next;
// 		}
// 		break;

// 	case STMT_WHILE:
// 		{
// 			/*
// 			while expr  stmt

// 			t.begin:  ----
// 				expr
// 			e.true:
// 				stmt
// 				goto begin----stmt.next==t.begin
// 			e.false:-----t.next

// 			*/
// 			TreeNode *expr = t->child;
// 			TreeNode *stmt = t->child->sibling;

// 			if (t->label.begin == "")
// 				t->label.begin = new_label();
// 			if (t->label.next == "")
// 				t->label.next = new_label();
				
// 			stmt->label.next = t->label.begin;
// 			stmt->label.begin = expr->label._true = new_label();

// 			expr->label._false = t->label.next;
// 			if (t->sibling)
// 				t->sibling->label.begin = t->label.next;

// 			recursive_get_label(expr);
// 			recursive_get_label(stmt);
// 		}
//     /* ... */
// 	}
}



#if 0
	void TreeNode::expr_gen_code(ostream &out, TreeNode *t)
	{
		TreeNode *e1 = t->child;
		TreeNode *e2 = t->child->sibling;
		switch (t->op_type)
		{
		// case ASSIGN:
		// 	break;

		case OP_ADD:
			out << "\tmovl $";
			if (e1->nodeType ==NODE_EXPR)
				;//out << "_" << symtbl.getname(e1->attr.symtbl_seq);
			else if (e1->nodeType == NODE_CONST)
				out << e1->int_val; //attr.vali;
			else ;//out << "t" << e1->temp_var;
			
			out << ", %eax" <<endl;

			out << "\taddl $";
			if (e2->nodeType ==NODE_EXPR)
				;//out << "_" << symtbl.getname(e2->attr.symtbl_seq);
			else if (e2->nodeType == NODE_CONST)
				out << e2->int_val; //attr.vali;
			else ;
			out << ", %eax" << endl;
			//out << "\tmovl %eax, $t" << t->temp_var << endl;
			break;
		// case AND:
		//     out << "\t# your own code of AND operation here" << endl;
		//     out << "\tjl @1" << endl;
		//     out << "\t# your asm code of AND operation end" << endl;
		// case LT:
		// 	break;
		/* ... */
		}
	}


	void TreeNode::get_temp_var(TreeNode *t)
	{
		if (t->kind != EXPR_NODE)
			return;
		if (t->attr.op < PLUS || t->attr.op > OVER)
			return;

		TreeNode *arg1 = t->children[0];
		TreeNode *arg2 = t->children[1];

		if (arg1->nodeType == OP_EXPR)
			temp_var_seq--;
		if (arg2 && arg2->nodeType == OP_EXPR)
			TreeNode::temp_var_seq--;
		t->temp_var = TreeNode::temp_var_seq;
		TreeNode::temp_var_seq++;
	}

	TreeNode* TreeNode::NewRoot(int kind, int nodeType, NodeAttr attr, int type,
					TreeNode *child1, TreeNode *child2, TreeNode *child3, TreeNode *child4)
	{
		TreeNode *t = new TreeNode;
		
		if (NULL == t)
			cerr << "Out of memory at line %d\n" << lineno;
		else
		{
			t->kind = kind;
			t->nodeType = nodeType;
			t->attr = attr;
			t->type = type;
			t->children[0] = child1;
			t->children[1] = child2;
			t->children[2] = child3;
			t->children[3] = child4;
			t->lineno = lineno;
			t->seq = TreeNode::node_seq++;
			t->sibling = NULL;
			t->label.begin = "";
			t->label.next = "";
			t->label._true = "";
			t->label._false = "";
			root = t;
			type_check(t); // type check
			get_temp_var(t); // generate temp veriables
		}
		return t;
	}

	//静态全局变量
	string TreeNode::new_label(void)
	{
		char tmp[20];

		sprintf(tmp, "@%d", TreeNode::label_seq);
		TreeNode::label_seq++;
		return tmp;
	}



	//表达式类型为'b':打标签   注意我的类型这里是用val_type_flag  不是type
	void TreeNode::expr_get_label(TreeNode *t)
	{
		if (t->val_type_flag != 'b')
			return;

		TreeNode *e1 = t->child;
		TreeNode *e2;
		if (t->child->sibling != nullptr)
			e2 = t->child->sibling;
		switch (t->op_type)
		{
			case OP_AND:
				e1->label._true = new_label();
				e1->label._false = t->label._false;

				e2->label._true = t->label._true;
				e2->label._false = t->label._false;
				// e1->label._false = e2->label._false = t->label._false;
				break;
				/**
				 t: e1  e2

					e1.1=newlabel 不知道
				t.1:==e2.1:
				t.0:==e1.0==e2.0
				* */

			case OP_OR:
				e1->label._false = new_label();
				e1->label._true = t->label._true;

				e2->label._true = t->label._true;
				e2->label._false = t->label._false;
				break;
			
			case OP_NOT:
				e1->label._true = t->label._false;
				e1->label._false = t->label._true;
				break;

			// case OP_EQ:
			// case OP_NOT_EQ:
			// case OP_MORE_EQ:
			// case OP_MORE_THAN:
			// case OP_LESS_EQ:
			// case OP_LESS_THAN:
			default:
				cout << "error" << endl;
				break;
			}
		if (e1)
			recursive_get_label(e1);
		if (e2)
			recursive_get_label(e2);
	}






	void TreeNode::gen_decl(ostream &out, TreeNode *t)
	{
		out << endl << "# define your veriables and temp veriables here" << endl;
		out << "\t.bss" << endl;
		for (; t->kind == DECL_NODE; t = t->sibling)
		{
			for (TreeNode *p = t->children[1]; p; p = p->sibling)
				if (p->type == Integer)
					out << "_" << symtbl.getname(p->attr.symtbl_seq) << ":" << endl;
					out << "\t.zero\t4" << endl;
					out << "\t.align\t4" << endl;
		}
		
		for (int i = 0; i < temp_var_seq; i++)
		{
			out << "t" <<  i << ":" << endl;
			out << "\t.zero\t4" << endl;
			out << "\t.align\t4" << endl;
		}
	}







#endif