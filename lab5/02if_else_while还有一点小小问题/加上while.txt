0 |  node@0   program                             children: @0 -> [ @1 @19 ]  
1 |  node@1   stmt         stmt_type: if else     children: @1 -> [ @2 @5 @14 ]  
1 |  node@2   expr         expr_type: ==          children: @2 -> [ @3 @4 ]  
1 |  node@3   var           var_name: a           
1 |  node@4   const       const_type: int         
5 |  node@5   stmt         stmt_type: skip        children: @5 -> [ @6 @10 ]  
3 |  node@6   stmt         stmt_type: decl        children: @6 -> [ @7 @8 @9 ]  
3 |  node@7   type              type: int         
3 |  node@8   var           var_name: a           
3 |  node@9   const       const_type: int         
4 |  node@10  stmt         stmt_type: decl        children: @10 -> [ @11 @12 @13 ]  
4 |  node@11  type              type: int         
4 |  node@12  var           var_name: b           
4 |  node@13  const       const_type: int         
9 |  node@14  stmt         stmt_type: skip        children: @14 -> [ @15 ]  
8 |  node@15  stmt         stmt_type: decl        children: @15 -> [ @16 @17 @18 ]  
8 |  node@16  type              type: int         
8 |  node@17  var           var_name: a           
8 |  node@18  const       const_type: int         
10|  node@19  stmt         stmt_type: while       children: @19 -> [ @20 @23 ]  
10|  node@20  expr         expr_type: >           children: @20 -> [ @21 @22 ]  
10|  node@21  var           var_name: a           
10|  node@22  const       const_type: int         
11|  node@23  stmt         stmt_type: assign      children: @23 -> [ @24 @25 ]  
11|  node@24  var           var_name: a           
11|  node@25  const       const_type: int         




if(a==1)
{
    int a = 1;
    int b = 3;
}
else
{
    int a = 5;
}
while(a>1)
    a = 3;
while(a>1)
{
    a = 3;
    }
while(a>1)
{
    a = 3;
    b = 5;
}