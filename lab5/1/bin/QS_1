/*
 * 终于成功了，问题就是我的tree函数：addSibling addChild 添加孩子函数 和 添加兄弟函数 不统一  
 * 虽然都能满足需求  但不统一，用起来就很麻烦
 * 
 * 添加孩子 调用一下就行  添加兄弟 调用时还要自己移动指针
 * 这就导致statements产生式那里，很不好 ，
 * 一直出导致 if while 语句 不能跟在其他语句后面 
 * 
 * 可能是我自己为了解决addSibling addChild 不统一 然后在产生式的语义动作添加了p_add_stmt指针！！！！
 *
 * 然后就给自挖了个大坑！！-------指针相互指，父亲又成了儿子的兄弟！！！！！！
 * 
 * ---------所以解决问题的方法错了，之后产生更大的错误！！！
 * 
 * 觉得助教的方法不对，其实是我自己的函数没设计好，：你的目的应该是使用起来方便！！！封装好指针操作！！！
 * statements:
    statement {
        //$$->addSibling($2);这样做不对，会覆盖！！！
        // //------我的方法------
        // //第一条语句一定从这里开始！！！在这里初始化p_add_stmt
        // $$ = new TreeNode(lineno, NODE_STMT);
        // $$=$1;
        // p_add_stmt=$$;
        // //------我的方法------
    }
    | statements statement 
    {   
       // //------我的方法------
        // $$=$1;
        // p_add_stmt->addSibling($2);
        // p_add_stmt=$2;
        // //------我的方法------
    }
    ;*/
int a = 1;
if (b == 3)
{
    int c = 333;
}
while (1)
{
    int d = 2;
}

if (e == 3)
{
    int f = 333;
}
else
{
    g++;
}


0 |  node@0   program                             children: @0 -> [ @1 @5 @14 @21 ]  
35|  node@1   stmt         stmt_type: decl        children: @1 -> [ @2 @3 @4 ]  
35|  node@2   type              type: int         
35|  node@3   var           var_name: a           
35|  node@4   const       const_type: int         
36|  node@5   stmt         stmt_type: if          children: @5 -> [ @6 @9 ]  
36|  node@6   expr         expr_type: ==          children: @6 -> [ @7 @8 ]  
36|  node@7   var           var_name: b           
36|  node@8   const       const_type: int         
39|  node@9   stmt         stmt_type: block       children: @9 -> [ @10 ]  
38|  node@10  stmt         stmt_type: decl        children: @10 -> [ @11 @12 @13 ]  
38|  node@11  type              type: int         
38|  node@12  var           var_name: c           
38|  node@13  const       const_type: int         
40|  node@14  stmt         stmt_type: while       children: @14 -> [ @15 @16 ]  
40|  node@15  const       const_type: int         
43|  node@16  stmt         stmt_type: block       children: @16 -> [ @17 ]  
42|  node@17  stmt         stmt_type: decl        children: @17 -> [ @18 @19 @20 ]  
42|  node@18  type              type: int         
42|  node@19  var           var_name: d           
42|  node@20  const       const_type: int         
45|  node@21  stmt         stmt_type: if else     children: @21 -> [ @22 @25 @30 ]  
45|  node@22  expr         expr_type: ==          children: @22 -> [ @23 @24 ]  
45|  node@23  var           var_name: e           
45|  node@24  const       const_type: int         
48|  node@25  stmt         stmt_type: block       children: @25 -> [ @26 ]  
47|  node@26  stmt         stmt_type: decl        children: @26 -> [ @27 @28 @29 ]  
47|  node@27  type              type: int         
47|  node@28  var           var_name: f           
47|  node@29  const       const_type: int         
52|  node@30  stmt         stmt_type: block       children: @30 -> [ @31 ]  
51|  node@31  expr         expr_type: ++          children: @31 -> [ @32 ]  
51|  node@32  var           var_name: g 
